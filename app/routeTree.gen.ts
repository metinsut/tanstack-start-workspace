/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as dashboardRouteImport } from './routes/(dashboard)/route'
import { Route as authRouteImport } from './routes/(auth)/route'
import { Route as dashboardIndexImport } from './routes/(dashboard)/index'
import { Route as authRegisterImport } from './routes/(auth)/register'
import { Route as authLoginImport } from './routes/(auth)/login'
import { Route as dashboardUserIndexImport } from './routes/(dashboard)/user/index'
import { Route as dashboardCommentIndexImport } from './routes/(dashboard)/comment/index'
import { Route as dashboardUserUserIdImport } from './routes/(dashboard)/user/$userId'
import { Route as dashboardmyTaskMyTestImport } from './routes/(dashboard)/(my-task)/my-test'
import { Route as dashboardmyTaskMyInterviewImport } from './routes/(dashboard)/(my-task)/my-interview'

// Create/Update Routes

const dashboardRouteRoute = dashboardRouteImport.update({
  id: '/(dashboard)',
  getParentRoute: () => rootRoute,
} as any)

const authRouteRoute = authRouteImport.update({
  id: '/(auth)',
  getParentRoute: () => rootRoute,
} as any)

const dashboardIndexRoute = dashboardIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => dashboardRouteRoute,
} as any)

const authRegisterRoute = authRegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => authRouteRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => authRouteRoute,
} as any)

const dashboardUserIndexRoute = dashboardUserIndexImport.update({
  id: '/user/',
  path: '/user/',
  getParentRoute: () => dashboardRouteRoute,
} as any)

const dashboardCommentIndexRoute = dashboardCommentIndexImport.update({
  id: '/comment/',
  path: '/comment/',
  getParentRoute: () => dashboardRouteRoute,
} as any)

const dashboardUserUserIdRoute = dashboardUserUserIdImport.update({
  id: '/user/$userId',
  path: '/user/$userId',
  getParentRoute: () => dashboardRouteRoute,
} as any)

const dashboardmyTaskMyTestRoute = dashboardmyTaskMyTestImport.update({
  id: '/(my-task)/my-test',
  path: '/my-test',
  getParentRoute: () => dashboardRouteRoute,
} as any)

const dashboardmyTaskMyInterviewRoute = dashboardmyTaskMyInterviewImport.update(
  {
    id: '/(my-task)/my-interview',
    path: '/my-interview',
    getParentRoute: () => dashboardRouteRoute,
  } as any,
)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(auth)': {
      id: '/(auth)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof authRouteImport
      parentRoute: typeof rootRoute
    }
    '/(dashboard)': {
      id: '/(dashboard)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof dashboardRouteImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof authRouteImport
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterImport
      parentRoute: typeof authRouteImport
    }
    '/(dashboard)/': {
      id: '/(dashboard)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof dashboardIndexImport
      parentRoute: typeof dashboardRouteImport
    }
    '/(dashboard)/(my-task)/my-interview': {
      id: '/(dashboard)/(my-task)/my-interview'
      path: '/my-interview'
      fullPath: '/my-interview'
      preLoaderRoute: typeof dashboardmyTaskMyInterviewImport
      parentRoute: typeof dashboardRouteImport
    }
    '/(dashboard)/(my-task)/my-test': {
      id: '/(dashboard)/(my-task)/my-test'
      path: '/my-test'
      fullPath: '/my-test'
      preLoaderRoute: typeof dashboardmyTaskMyTestImport
      parentRoute: typeof dashboardRouteImport
    }
    '/(dashboard)/user/$userId': {
      id: '/(dashboard)/user/$userId'
      path: '/user/$userId'
      fullPath: '/user/$userId'
      preLoaderRoute: typeof dashboardUserUserIdImport
      parentRoute: typeof dashboardRouteImport
    }
    '/(dashboard)/comment/': {
      id: '/(dashboard)/comment/'
      path: '/comment'
      fullPath: '/comment'
      preLoaderRoute: typeof dashboardCommentIndexImport
      parentRoute: typeof dashboardRouteImport
    }
    '/(dashboard)/user/': {
      id: '/(dashboard)/user/'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof dashboardUserIndexImport
      parentRoute: typeof dashboardRouteImport
    }
  }
}

// Create and export the route tree

interface authRouteRouteChildren {
  authLoginRoute: typeof authLoginRoute
  authRegisterRoute: typeof authRegisterRoute
}

const authRouteRouteChildren: authRouteRouteChildren = {
  authLoginRoute: authLoginRoute,
  authRegisterRoute: authRegisterRoute,
}

const authRouteRouteWithChildren = authRouteRoute._addFileChildren(
  authRouteRouteChildren,
)

interface dashboardRouteRouteChildren {
  dashboardIndexRoute: typeof dashboardIndexRoute
  dashboardmyTaskMyInterviewRoute: typeof dashboardmyTaskMyInterviewRoute
  dashboardmyTaskMyTestRoute: typeof dashboardmyTaskMyTestRoute
  dashboardUserUserIdRoute: typeof dashboardUserUserIdRoute
  dashboardCommentIndexRoute: typeof dashboardCommentIndexRoute
  dashboardUserIndexRoute: typeof dashboardUserIndexRoute
}

const dashboardRouteRouteChildren: dashboardRouteRouteChildren = {
  dashboardIndexRoute: dashboardIndexRoute,
  dashboardmyTaskMyInterviewRoute: dashboardmyTaskMyInterviewRoute,
  dashboardmyTaskMyTestRoute: dashboardmyTaskMyTestRoute,
  dashboardUserUserIdRoute: dashboardUserUserIdRoute,
  dashboardCommentIndexRoute: dashboardCommentIndexRoute,
  dashboardUserIndexRoute: dashboardUserIndexRoute,
}

const dashboardRouteRouteWithChildren = dashboardRouteRoute._addFileChildren(
  dashboardRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof dashboardIndexRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/my-interview': typeof dashboardmyTaskMyInterviewRoute
  '/my-test': typeof dashboardmyTaskMyTestRoute
  '/user/$userId': typeof dashboardUserUserIdRoute
  '/comment': typeof dashboardCommentIndexRoute
  '/user': typeof dashboardUserIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof dashboardIndexRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/my-interview': typeof dashboardmyTaskMyInterviewRoute
  '/my-test': typeof dashboardmyTaskMyTestRoute
  '/user/$userId': typeof dashboardUserUserIdRoute
  '/comment': typeof dashboardCommentIndexRoute
  '/user': typeof dashboardUserIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(auth)': typeof authRouteRouteWithChildren
  '/(dashboard)': typeof dashboardRouteRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/register': typeof authRegisterRoute
  '/(dashboard)/': typeof dashboardIndexRoute
  '/(dashboard)/(my-task)/my-interview': typeof dashboardmyTaskMyInterviewRoute
  '/(dashboard)/(my-task)/my-test': typeof dashboardmyTaskMyTestRoute
  '/(dashboard)/user/$userId': typeof dashboardUserUserIdRoute
  '/(dashboard)/comment/': typeof dashboardCommentIndexRoute
  '/(dashboard)/user/': typeof dashboardUserIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/register'
    | '/my-interview'
    | '/my-test'
    | '/user/$userId'
    | '/comment'
    | '/user'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/register'
    | '/my-interview'
    | '/my-test'
    | '/user/$userId'
    | '/comment'
    | '/user'
  id:
    | '__root__'
    | '/(auth)'
    | '/(dashboard)'
    | '/(auth)/login'
    | '/(auth)/register'
    | '/(dashboard)/'
    | '/(dashboard)/(my-task)/my-interview'
    | '/(dashboard)/(my-task)/my-test'
    | '/(dashboard)/user/$userId'
    | '/(dashboard)/comment/'
    | '/(dashboard)/user/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  authRouteRoute: typeof authRouteRouteWithChildren
  dashboardRouteRoute: typeof dashboardRouteRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  authRouteRoute: authRouteRouteWithChildren,
  dashboardRouteRoute: dashboardRouteRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(auth)",
        "/(dashboard)"
      ]
    },
    "/(auth)": {
      "filePath": "(auth)/route.tsx",
      "children": [
        "/(auth)/login",
        "/(auth)/register"
      ]
    },
    "/(dashboard)": {
      "filePath": "(dashboard)/route.tsx",
      "children": [
        "/(dashboard)/",
        "/(dashboard)/(my-task)/my-interview",
        "/(dashboard)/(my-task)/my-test",
        "/(dashboard)/user/$userId",
        "/(dashboard)/comment/",
        "/(dashboard)/user/"
      ]
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx",
      "parent": "/(auth)"
    },
    "/(auth)/register": {
      "filePath": "(auth)/register.tsx",
      "parent": "/(auth)"
    },
    "/(dashboard)/": {
      "filePath": "(dashboard)/index.tsx",
      "parent": "/(dashboard)"
    },
    "/(dashboard)/(my-task)/my-interview": {
      "filePath": "(dashboard)/(my-task)/my-interview.tsx",
      "parent": "/(dashboard)"
    },
    "/(dashboard)/(my-task)/my-test": {
      "filePath": "(dashboard)/(my-task)/my-test.tsx",
      "parent": "/(dashboard)"
    },
    "/(dashboard)/user/$userId": {
      "filePath": "(dashboard)/user/$userId.tsx",
      "parent": "/(dashboard)"
    },
    "/(dashboard)/comment/": {
      "filePath": "(dashboard)/comment/index.tsx",
      "parent": "/(dashboard)"
    },
    "/(dashboard)/user/": {
      "filePath": "(dashboard)/user/index.tsx",
      "parent": "/(dashboard)"
    }
  }
}
ROUTE_MANIFEST_END */
