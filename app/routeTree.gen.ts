/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AboutImport } from './routes/about'
import { Route as MyTaskImport } from './routes/_my-task'
import { Route as IndexImport } from './routes/index'
import { Route as dashboardMyTestImport } from './routes/(dashboard)/my-test'
import { Route as dashboardMyInterviewImport } from './routes/(dashboard)/my-interview'
import { Route as authRegisterImport } from './routes/(auth)/register'
import { Route as authLoginImport } from './routes/(auth)/login'
import { Route as authLayoutImport } from './routes/(auth)/layout'
import { Route as dashboardUserIndexImport } from './routes/(dashboard)/user/index'
import { Route as dashboardCommentIndexImport } from './routes/(dashboard)/comment/index'
import { Route as dashboardUserUserIdImport } from './routes/(dashboard)/user/$userId'

// Create/Update Routes

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const MyTaskRoute = MyTaskImport.update({
  id: '/_my-task',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const dashboardMyTestRoute = dashboardMyTestImport.update({
  id: '/(dashboard)/my-test',
  path: '/my-test',
  getParentRoute: () => rootRoute,
} as any)

const dashboardMyInterviewRoute = dashboardMyInterviewImport.update({
  id: '/(dashboard)/my-interview',
  path: '/my-interview',
  getParentRoute: () => rootRoute,
} as any)

const authRegisterRoute = authRegisterImport.update({
  id: '/(auth)/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const authLayoutRoute = authLayoutImport.update({
  id: '/(auth)/layout',
  path: '/layout',
  getParentRoute: () => rootRoute,
} as any)

const dashboardUserIndexRoute = dashboardUserIndexImport.update({
  id: '/(dashboard)/user/',
  path: '/user/',
  getParentRoute: () => rootRoute,
} as any)

const dashboardCommentIndexRoute = dashboardCommentIndexImport.update({
  id: '/(dashboard)/comment/',
  path: '/comment/',
  getParentRoute: () => rootRoute,
} as any)

const dashboardUserUserIdRoute = dashboardUserUserIdImport.update({
  id: '/(dashboard)/user/$userId',
  path: '/user/$userId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_my-task': {
      id: '/_my-task'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof MyTaskImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/layout': {
      id: '/(auth)/layout'
      path: '/layout'
      fullPath: '/layout'
      preLoaderRoute: typeof authLayoutImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    '/(auth)/register': {
      id: '/(auth)/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof authRegisterImport
      parentRoute: typeof rootRoute
    }
    '/(dashboard)/my-interview': {
      id: '/(dashboard)/my-interview'
      path: '/my-interview'
      fullPath: '/my-interview'
      preLoaderRoute: typeof dashboardMyInterviewImport
      parentRoute: typeof rootRoute
    }
    '/(dashboard)/my-test': {
      id: '/(dashboard)/my-test'
      path: '/my-test'
      fullPath: '/my-test'
      preLoaderRoute: typeof dashboardMyTestImport
      parentRoute: typeof rootRoute
    }
    '/(dashboard)/user/$userId': {
      id: '/(dashboard)/user/$userId'
      path: '/user/$userId'
      fullPath: '/user/$userId'
      preLoaderRoute: typeof dashboardUserUserIdImport
      parentRoute: typeof rootRoute
    }
    '/(dashboard)/comment/': {
      id: '/(dashboard)/comment/'
      path: '/comment'
      fullPath: '/comment'
      preLoaderRoute: typeof dashboardCommentIndexImport
      parentRoute: typeof rootRoute
    }
    '/(dashboard)/user/': {
      id: '/(dashboard)/user/'
      path: '/user'
      fullPath: '/user'
      preLoaderRoute: typeof dashboardUserIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof MyTaskRoute
  '/about': typeof AboutRoute
  '/layout': typeof authLayoutRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/my-interview': typeof dashboardMyInterviewRoute
  '/my-test': typeof dashboardMyTestRoute
  '/user/$userId': typeof dashboardUserUserIdRoute
  '/comment': typeof dashboardCommentIndexRoute
  '/user': typeof dashboardUserIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof MyTaskRoute
  '/about': typeof AboutRoute
  '/layout': typeof authLayoutRoute
  '/login': typeof authLoginRoute
  '/register': typeof authRegisterRoute
  '/my-interview': typeof dashboardMyInterviewRoute
  '/my-test': typeof dashboardMyTestRoute
  '/user/$userId': typeof dashboardUserUserIdRoute
  '/comment': typeof dashboardCommentIndexRoute
  '/user': typeof dashboardUserIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_my-task': typeof MyTaskRoute
  '/about': typeof AboutRoute
  '/(auth)/layout': typeof authLayoutRoute
  '/(auth)/login': typeof authLoginRoute
  '/(auth)/register': typeof authRegisterRoute
  '/(dashboard)/my-interview': typeof dashboardMyInterviewRoute
  '/(dashboard)/my-test': typeof dashboardMyTestRoute
  '/(dashboard)/user/$userId': typeof dashboardUserUserIdRoute
  '/(dashboard)/comment/': typeof dashboardCommentIndexRoute
  '/(dashboard)/user/': typeof dashboardUserIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/about'
    | '/layout'
    | '/login'
    | '/register'
    | '/my-interview'
    | '/my-test'
    | '/user/$userId'
    | '/comment'
    | '/user'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/about'
    | '/layout'
    | '/login'
    | '/register'
    | '/my-interview'
    | '/my-test'
    | '/user/$userId'
    | '/comment'
    | '/user'
  id:
    | '__root__'
    | '/'
    | '/_my-task'
    | '/about'
    | '/(auth)/layout'
    | '/(auth)/login'
    | '/(auth)/register'
    | '/(dashboard)/my-interview'
    | '/(dashboard)/my-test'
    | '/(dashboard)/user/$userId'
    | '/(dashboard)/comment/'
    | '/(dashboard)/user/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  MyTaskRoute: typeof MyTaskRoute
  AboutRoute: typeof AboutRoute
  authLayoutRoute: typeof authLayoutRoute
  authLoginRoute: typeof authLoginRoute
  authRegisterRoute: typeof authRegisterRoute
  dashboardMyInterviewRoute: typeof dashboardMyInterviewRoute
  dashboardMyTestRoute: typeof dashboardMyTestRoute
  dashboardUserUserIdRoute: typeof dashboardUserUserIdRoute
  dashboardCommentIndexRoute: typeof dashboardCommentIndexRoute
  dashboardUserIndexRoute: typeof dashboardUserIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  MyTaskRoute: MyTaskRoute,
  AboutRoute: AboutRoute,
  authLayoutRoute: authLayoutRoute,
  authLoginRoute: authLoginRoute,
  authRegisterRoute: authRegisterRoute,
  dashboardMyInterviewRoute: dashboardMyInterviewRoute,
  dashboardMyTestRoute: dashboardMyTestRoute,
  dashboardUserUserIdRoute: dashboardUserUserIdRoute,
  dashboardCommentIndexRoute: dashboardCommentIndexRoute,
  dashboardUserIndexRoute: dashboardUserIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_my-task",
        "/about",
        "/(auth)/layout",
        "/(auth)/login",
        "/(auth)/register",
        "/(dashboard)/my-interview",
        "/(dashboard)/my-test",
        "/(dashboard)/user/$userId",
        "/(dashboard)/comment/",
        "/(dashboard)/user/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_my-task": {
      "filePath": "_my-task.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/(auth)/layout": {
      "filePath": "(auth)/layout.tsx"
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/(auth)/register": {
      "filePath": "(auth)/register.tsx"
    },
    "/(dashboard)/my-interview": {
      "filePath": "(dashboard)/my-interview.tsx"
    },
    "/(dashboard)/my-test": {
      "filePath": "(dashboard)/my-test.tsx"
    },
    "/(dashboard)/user/$userId": {
      "filePath": "(dashboard)/user/$userId.tsx"
    },
    "/(dashboard)/comment/": {
      "filePath": "(dashboard)/comment/index.tsx"
    },
    "/(dashboard)/user/": {
      "filePath": "(dashboard)/user/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
